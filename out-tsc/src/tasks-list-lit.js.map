{"version":3,"file":"tasks-list-lit.js","sourceRoot":"","sources":["../../src/tasks-list-lit.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAGrD,IAAM,YAAY,GAAlB,MAAM,YAAa,SAAQ,UAAU;IAArC;;QACuB,WAAM,GAAG,iBAAiB,CAAC;QAC5B,UAAK,GAAa,EAAE,CAAC;QACrB,mBAAc,GAAa,EAAE,CAAC;QAC7B,YAAO,GAAG,EAAE,CAAC;QACd,sBAAiB,GAAa,EAAE,CAAC;QACjC,wBAAmB,GAAa,EAAE,CAAC;IAqOhE,CAAC;IAlGC,MAAM;QACJ,OAAO,IAAI,CAAA;;;gBAGC,IAAI,CAAC,MAAM;;2BAEA,IAAI,CAAC,OAAO;;;wBAGf,IAAI,CAAC,OAAO;wBACZ,IAAI,CAAC,aAAa;;;;;;;cAO5B,IAAI,CAAC,KAAK,CAAC,GAAG,CACd,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,CAAA;;;;;6BAKN,CAAC,CAAK,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,CAAC,MAAM,CAAC,WAAW,CAAC;qBAC7D,IAAI;oDAC2B,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC;kCAC/C,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;;kCAE9B,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;;eAE/C,CACF;;;;;;;cAOC,IAAI,CAAC,cAAc,CAAC,GAAG,CACvB,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,CAAC,IAAI,CAAA;;oBAEf,IAAI;wDACgC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;kCACrD,GAAG,EAAE,CAAC,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;;eAExD,CACF;;;;KAIR,CAAC;IACJ,CAAC;IAED,aAAa,CAAC,CAAQ;QACpB,IAAI,CAAC,OAAO,GAAI,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC;IACtD,CAAC;IAED,OAAO,CAAC,CAAQ;QACd,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE;YAC9B,IAAI,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3C,IAAI,CAAC,iBAAiB,GAAG,CAAC,GAAG,IAAI,CAAC,iBAAiB,EAAE,IAAI,IAAI,EAAE,CAAC,cAAc,EAAE,CAAC,CAAC;YAClF,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;YAClB,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAC5B,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;SACzC;IACH,CAAC;IAED,QAAQ,CAAC,KAAa,EAAE,OAAe;QACrC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC;QAC5B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAED,YAAY,CAAC,KAAa;QACxB,MAAM,aAAa,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACxC,IAAI,CAAC,cAAc,GAAG,CAAC,GAAG,IAAI,CAAC,cAAc,EAAE,aAAa,CAAC,CAAC;QAC9D,IAAI,CAAC,mBAAmB,GAAG,CAAC,GAAG,IAAI,CAAC,mBAAmB,EAAE,IAAI,IAAI,EAAE,CAAC,cAAc,EAAE,CAAC,CAAC;QACtF,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACxC,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;QACrC,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;QAC1C,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC5B,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;IAC1C,CAAC;IAED,UAAU,CAAC,KAAa;QACtB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACxC,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC5B,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;IAC1C,CAAC;IAED,mBAAmB,CAAC,KAAa;QAC/B,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QACrC,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC1C,IAAI,CAAC,aAAa,CAAC,gBAAgB,CAAC,CAAC;QACrC,IAAI,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;IAC5C,CAAC;;AAlOM,mBAAM,GAAG,GAAG,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CA+HpB,CAAC;AAtI4B;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;4CAA4B;AAC5B;IAA1B,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;2CAAsB;AACrB;IAA1B,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;oDAA+B;AAC7B;IAA3B,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;6CAAc;AACd;IAA1B,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;uDAAkC;AACjC;IAA1B,QAAQ,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC;yDAAoC;AANnD,YAAY;IADxB,aAAa,CAAC,gBAAgB,CAAC;GACnB,YAAY,CA2OxB;SA3OY,YAAY","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { customElement, property } from 'lit/decorators.js';\n\n@customElement('tasks-list-lit')\nexport class TasksListLit extends LitElement {\n  @property({ type: String }) header = `Lista de Tareas`;\n  @property({ type: Array }) tasks: string[] = [];\n  @property({ type: Array }) completedTasks: string[] = [];\n  @property({ type: String }) newTask = '';\n  @property({ type: Array }) taskCreationDates: string[] = [];\n  @property({ type: Array }) taskCompletionDates: string[] = [];\n\n  static styles = css`\n  :host {\n    display: block;\n    text-align: center;\n    font-family: Arial, sans-serif;\n  }\n\n  main {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); /* Dos columnas con ancho mínimo de 300px */\n    gap: 20px; /* Espacio entre columnas */\n    margin: 20px;\n  }\n\n  .column {\n    padding: 20px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    background-color: #fff;\n    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);\n    transition: transform 0.2s ease-in-out;\n  }\n\n  .column:hover {\n    transform: scale(1.02);\n  }\n\n  h1, h2 {\n    color: #333;\n  }\n\n  h1 {\n    font-size: 24px;\n    margin-bottom: 10px;\n  }\n\n  h1 span {\n    color: #00002c;\n  }\n\n  .logo {\n    width: 64px;\n    height: 64px;\n    margin-bottom: 20px;\n  }\n\n  form {\n    margin-top: 10px;\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    justify-content: center;\n  }\n\n  input[type=\"text\"] {\n    flex: 1;\n    padding: 8px;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    margin-right: 10px;\n  }\n\n  button[type=\"submit\"] {\n    padding: 8px 16px;\n    background-color: #007bff;\n    color: #fff;\n    border: none;\n    border-radius: 5px;\n    cursor: pointer;\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n    width: 100%;\n  }\n\n  li {\n    display: flex;\n    align-items: center;\n    border: 1px solid #ccc;\n    border-radius: 5px;\n    padding: 10px;\n    margin: 5px 0;\n    transition: transform 0.2s ease-in-out;\n  }\n\n  li:hover {\n    transform: scale(1.02);\n  }\n\n  .task-date {\n    margin-left: auto;\n    color: #888;\n    font-size: 0.8rem;\n  }\n\n  .completed-list {\n    background-color: #f0f0f0;\n  }\n\n  .text-success {\n    color: #28a745;\n    transition: transform 0.2s ease-in-out;\n    margin-left: 10px;\n  }\n\n  .text-danger {\n    color: #dc3545;\n    transition: transform 0.2s ease-in-out;\n    margin-left: 10px;\n  }\n\n  .cursor-pointer {\n    cursor: pointer;\n  }\n\n  .text-success:hover,\n  .text-danger:hover {\n    transform: scale(1.2);\n  }\n\n  @media (max-width: 768px) {\n    main {\n      grid-template-columns: 1fr; /* Una sola columna en dispositivos móviles */\n    }\n  }\n`;\n\n  render() {\n    return html`\n      <main>\n        <div class=\"column\">\n          <h1>${this.header} con Lit</h1>\n          <img class=\"logo\" src=\"../assets/imagenes/lit.png\" alt=\"Logo de la aplicación\">\n          <form @submit=\"${this.addTask}\">\n            <input\n              type=\"text\"\n              .value=\"${this.newTask}\"\n              @input=\"${this.updateNewTask}\"\n              placeholder=\"Nueva tarea\"\n            />\n            <button type=\"submit\" class=\"btn btn-primary\">Agregar</button>\n          </form>\n\n          <ul>\n            ${this.tasks.map(\n              (task, index) => html`\n                <li>\n                  <span \n                    class=\"editable\" \n                    contenteditable=\"true\" \n                    @blur=\"${(e:any) => this.editTask(index, e.target.textContent)}\"\n                  >${task}</span>\n                  <span class=\"task-date\">Creado: ${this.taskCreationDates[index]}</span>\n                  <span @click=\"${() => this.completeTask(index)}\" class=\"text-success cursor-pointer\">&#x2714;</span>\n                  <span @click\n                  <span @click=\"${() => this.deleteTask(index)}\" class=\"text-danger cursor-pointer\">&#x2716;</span>\n                </li>\n              `\n            )}\n          </ul>\n        </div>\n\n        <div class=\"column completed-list\">\n          <h2>Tareas Completas</h2>\n          <ul>\n            ${this.completedTasks.map(\n              (task, index) => html`\n                <li>\n                  ${task}\n                  <span class=\"task-date\">Completado: ${this.taskCompletionDates[index]}</span>\n                  <span @click=\"${() => this.deleteCompletedTask(index)}\" class=\"text-danger cursor-pointer\">&#x2716;</span>\n                </li>\n              `\n            )}\n          </ul>\n        </div>\n      </main>\n    `;\n  }\n\n  updateNewTask(e: Event) {\n    this.newTask = (e.target as HTMLInputElement).value;\n  }\n\n  addTask(e: Event) {\n    e.preventDefault();\n    if (this.newTask.trim() !== '') {\n      this.tasks = [...this.tasks, this.newTask];\n      this.taskCreationDates = [...this.taskCreationDates, new Date().toLocaleString()];\n      this.newTask = '';\n      this.requestUpdate('tasks');\n      this.requestUpdate('taskCreationDates');\n    }\n  }\n\n  editTask(index: number, newText: string) {\n    this.tasks[index] = newText;\n    this.requestUpdate('tasks');\n  }\n\n  completeTask(index: number) {\n    const completedTask = this.tasks[index];\n    this.completedTasks = [...this.completedTasks, completedTask];\n    this.taskCompletionDates = [...this.taskCompletionDates, new Date().toLocaleString()];\n    this.tasks.splice(index, 1);\n    this.taskCreationDates.splice(index, 1);\n    this.requestUpdate('completedTasks');\n    this.requestUpdate('taskCompletionDates');\n    this.requestUpdate('tasks');\n    this.requestUpdate('taskCreationDates');\n  }\n\n  deleteTask(index: number) {\n    this.tasks.splice(index, 1);\n    this.taskCreationDates.splice(index, 1);\n    this.requestUpdate('tasks');\n    this.requestUpdate('taskCreationDates');\n  }\n\n  deleteCompletedTask(index: number) {\n    this.completedTasks.splice(index, 1);\n    this.taskCompletionDates.splice(index, 1);\n    this.requestUpdate('completedTasks');\n    this.requestUpdate('taskCompletionDates');\n  }\n}\n"]}